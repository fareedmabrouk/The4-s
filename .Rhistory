# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(6,
img(src="fareed_pic.png")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEsssST")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(6,
img(src="fareed_pic.png")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
majors_salary <- read.csv("data/degrees-that-pay-back.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST1")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png", height="50%", width="50%")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
majors_salary <- read.csv("data/degrees-that-pay-back.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST1")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png", height="50%", width="50%")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
majors_salary <- read.csv("data/degrees-that-pay-back.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST1")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png", height="75%", width="75%")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
majors_salary <- read.csv("data/degrees-that-pay-back.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST2")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png", height="75%", width="75%")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
majors_salary <- read.csv("data/degrees-that-pay-back.csv")
# Define UI for application that draws a histogram
ui <- fluidPage(
titlePanel("College Major Insights"),
navbarPage(
"Home",
financial,
about_us
)
)
financial <- tabPanel(
"Financial",
p("TEST2")
)
about_test <- fixedRow(
column(9,
"About the Team",
fixedRow(
column(3,
img(src="fareed_picture.png", height="75%", width="75%")
),
column(3,
"Level 2"
)
)
)
)
about_us <- tabPanel(
"About Us",
fluidPage(
about_test
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
financial <- tabPanel(
"Financial",
p("TEST2"),
box(title = "Instructions",
status = "primary",
solidHeader = F,
collapsible = F,
width = 12,
fluidRow(column(width = 10, textOutput( "instructions" )),
column(width = 2, align = "center",
img(src="fareed_picture.png", width=100))))
)
runApp()
